AVCODEC: AVCodecContext AVOptions:
AVCODEC:   -b                 AVCODEC: <int64>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set bitrate (in bits/s)AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: I64_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 200000AVCODEC: )AVCODEC: 
AVCODEC:   -ab                AVCODEC: <int64>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set bitrate (in bits/s)AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 128000AVCODEC: )AVCODEC: 
AVCODEC:   -bt                AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.AVCODEC:  (from AVCODEC: 1AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 4e+06AVCODEC: )AVCODEC: 
AVCODEC:   -flags             AVCODEC: <flags>      AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: SAVCODEC: .AVCODEC: .AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:      unaligned       AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  allow decoders to produce unaligned outputAVCODEC: 
AVCODEC:      mv4             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use four motion vectors per macroblock (MPEG-4)AVCODEC: 
AVCODEC:      qpel            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use 1/4-pel motion compensationAVCODEC: 
AVCODEC:      loop            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use loop filterAVCODEC: 
AVCODEC:      gmc             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use gmcAVCODEC: 
AVCODEC:      mv0             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  always try a mb with mv=<0,0>AVCODEC: 
AVCODEC:      gray            AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  only decode/encode grayscaleAVCODEC: 
AVCODEC:      psnr            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  error[?] variables will be set during encodingAVCODEC: 
AVCODEC:      truncated       AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Input bitstream might be randomly truncatedAVCODEC: 
AVCODEC:      naq             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  normalize adaptive quantizationAVCODEC: 
AVCODEC:      ildct           AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use interlaced DCTAVCODEC: 
AVCODEC:      low_delay       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  force low delayAVCODEC: 
AVCODEC:      global_header   AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  place global headers in extradata instead of every keyframeAVCODEC: 
AVCODEC:      bitexact        AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: SAVCODEC: .AVCODEC: .AVCODEC:  use only bitexact functions (except (I)DCT)AVCODEC: 
AVCODEC:      aic             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  H.263 advanced intra coding / MPEG-4 AC predictionAVCODEC: 
AVCODEC:      ilme            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  interlaced motion estimationAVCODEC: 
AVCODEC:      cgop            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  closed GOPAVCODEC: 
AVCODEC:      output_corrupt  AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Output even potentially corrupted framesAVCODEC: 
AVCODEC:   -me_method         AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set motion estimation methodAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: epzsAVCODEC: )AVCODEC: 
AVCODEC:      zero            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  zero motion estimation (fastest)AVCODEC: 
AVCODEC:      full            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  full motion estimation (slowest)AVCODEC: 
AVCODEC:      epzs            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  EPZS motion estimationAVCODEC: 
AVCODEC:      esa             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  esa motion estimation (alias for full)AVCODEC: 
AVCODEC:      tesa            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  tesa motion estimationAVCODEC: 
AVCODEC:      dia             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  diamond motion estimation (alias for EPZS)AVCODEC: 
AVCODEC:      log             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  log motion estimationAVCODEC: 
AVCODEC:      phods           AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  phods motion estimationAVCODEC: 
AVCODEC:      x1              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  X1 motion estimationAVCODEC: 
AVCODEC:      hex             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  hex motion estimationAVCODEC: 
AVCODEC:      umh             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  umh motion estimationAVCODEC: 
AVCODEC:      iter            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  iter motion estimationAVCODEC: 
AVCODEC:   -g                 AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set the group of picture (GOP) sizeAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 12AVCODEC: )AVCODEC: 
AVCODEC:   -ar                AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set audio sampling rate (in Hz)AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -ac                AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set number of audio channelsAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -cutoff            AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set cutoff bandwidthAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -frame_size        AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -qcomp             AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0AVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0.5AVCODEC: )AVCODEC: 
AVCODEC:   -qblur             AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  video quantizer scale blur (VBR)AVCODEC:  (from AVCODEC: -1AVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0.5AVCODEC: )AVCODEC: 
AVCODEC:   -qmin              AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  minimum video quantizer scale (VBR)AVCODEC:  (from AVCODEC: -1AVCODEC:  to AVCODEC: 69AVCODEC: )AVCODEC:  (default AVCODEC: 2AVCODEC: )AVCODEC: 
AVCODEC:   -qmax              AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  maximum video quantizer scale (VBR)AVCODEC:  (from AVCODEC: -1AVCODEC:  to AVCODEC: 1024AVCODEC: )AVCODEC:  (default AVCODEC: 31AVCODEC: )AVCODEC: 
AVCODEC:   -qdiff             AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  maximum difference between the quantizer scales (VBR)AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 3AVCODEC: )AVCODEC: 
AVCODEC:   -bf                AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set maximum number of B-frames between non-B-framesAVCODEC:  (from AVCODEC: -1AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -b_qfactor         AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  QP factor between P- and B-framesAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 1.25AVCODEC: )AVCODEC: 
AVCODEC:   -rc_strategy       AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  ratecontrol methodAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -b_strategy        AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  strategy to choose between I/P/B-framesAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -ps                AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  RTP payload size in bytesAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -bug               AVCODEC: <flags>      AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  work around not autodetected encoder bugsAVCODEC:  (default AVCODEC: autodetectAVCODEC: )AVCODEC: 
AVCODEC:      autodetect      AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      old_msmpeg4     AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  some old lavc-generated MSMPEG4v3 files (no autodetection)AVCODEC: 
AVCODEC:      xvid_ilace      AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Xvid interlacing bug (autodetected if FOURCC == XVIX)AVCODEC: 
AVCODEC:      ump4            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (autodetected if FOURCC == UMP4)AVCODEC: 
AVCODEC:      no_padding      AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  padding bug (autodetected)AVCODEC: 
AVCODEC:      amv             AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      ac_vlc          AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  illegal VLC bug (autodetected per FOURCC)AVCODEC: 
AVCODEC:      qpel_chroma     AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      std_qpel        AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  old standard qpel (autodetected per FOURCC/version)AVCODEC: 
AVCODEC:      qpel_chroma2    AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      direct_blocksize AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  direct-qpel-blocksize bug (autodetected per FOURCC/version)AVCODEC: 
AVCODEC:      edge            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  edge padding bug (autodetected per FOURCC/version)AVCODEC: 
AVCODEC:      hpel_chroma     AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      dc_clip         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      ms              AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  work around various bugs in Microsoft's broken decodersAVCODEC: 
AVCODEC:      trunc           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  truncated framesAVCODEC: 
AVCODEC:   -strict            AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  how strictly to follow the standardsAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: normalAVCODEC: )AVCODEC: 
AVCODEC:      very            AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  strictly conform to a older more strict version of the spec or reference softwareAVCODEC: 
AVCODEC:      strict          AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  strictly conform to all the things in the spec no matter what the consequencesAVCODEC: 
AVCODEC:      normal          AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      unofficial      AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  allow unofficial extensionsAVCODEC: 
AVCODEC:      experimental    AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  allow non-standardized experimental thingsAVCODEC: 
AVCODEC:   -b_qoffset         AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  QP offset between P- and B-framesAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 1.25AVCODEC: )AVCODEC: 
AVCODEC:   -err_detect        AVCODEC: <flags>      AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set error detection flagsAVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:      crccheck        AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  verify embedded CRCsAVCODEC: 
AVCODEC:      bitstream       AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  detect bitstream specification deviationsAVCODEC: 
AVCODEC:      buffer          AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  detect improper bitstream lengthAVCODEC: 
AVCODEC:      explode         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  abort decoding on minor error detectionAVCODEC: 
AVCODEC:      ignore_err      AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  ignore errorsAVCODEC: 
AVCODEC:      careful         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  consider things that violate the spec, are fast to check and have not been seen in the wild as errorsAVCODEC: 
AVCODEC:      compliant       AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  consider all spec non compliancies as errorsAVCODEC: 
AVCODEC:      aggressive      AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  consider things that a sane encoder should not do as an errorAVCODEC: 
AVCODEC:   -mpeg_quant        AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use MPEG quantizers instead of H.263AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -qsquish           AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, use encoder private options insteadAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 99AVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -rc_qmod_amp       AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, use encoder private options insteadAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -rc_qmod_freq      AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, use encoder private options insteadAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -rc_eq             AVCODEC: <string>     AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, use encoder private options insteadAVCODEC: 
AVCODEC:   -maxrate           AVCODEC: <int64>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  maximum bitrate (in bits/s). Used for VBV together with bufsize.AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -minrate           AVCODEC: <int64>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  minimum bitrate (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -bufsize           AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set ratecontrol buffer size (in bits)AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -rc_buf_aggressivity AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, use encoder private options insteadAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 1AVCODEC: )AVCODEC: 
AVCODEC:   -i_qfactor         AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  QP factor between P- and I-framesAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: -0.8AVCODEC: )AVCODEC: 
AVCODEC:   -i_qoffset         AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  QP offset between P- and I-framesAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -rc_init_cplx      AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, use encoder private options insteadAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -dct               AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  DCT algorithmAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: autoAVCODEC: )AVCODEC: 
AVCODEC:      auto            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  autoselect a good oneAVCODEC: 
AVCODEC:      fastint         AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  fast integerAVCODEC: 
AVCODEC:      int             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  accurate integerAVCODEC: 
AVCODEC:      mmx             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      altivec         AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      faan            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  floating point AAN DCTAVCODEC: 
AVCODEC:   -lumi_mask         AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  compresses bright areas stronger than medium onesAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -tcplx_mask        AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  temporal complexity maskingAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -scplx_mask        AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  spatial complexity maskingAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -p_mask            AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  inter maskingAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -dark_mask         AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  compresses dark areas stronger than medium onesAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -idct              AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  select IDCT implementationAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: autoAVCODEC: )AVCODEC: 
AVCODEC:      auto            AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      int             AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      simple          AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      simplemmx       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      arm             AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      altivec         AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      sh4             AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      simplearm       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      simplearmv5te   AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      simplearmv6     AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      simpleneon      AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      simplealpha     AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      ipp             AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      xvid            AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      xvidmmx         AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, for compatibility onlyAVCODEC: 
AVCODEC:      faani           AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  floating point AAN IDCTAVCODEC: 
AVCODEC:      simpleauto      AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:   -ec                AVCODEC: <flags>      AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set error concealment strategyAVCODEC:  (default AVCODEC: guess_mvs+deblockAVCODEC: )AVCODEC: 
AVCODEC:      guess_mvs       AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  iterative motion vector (MV) search (slow)AVCODEC: 
AVCODEC:      deblock         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use strong deblock filter for damaged MBsAVCODEC: 
AVCODEC:      favor_inter     AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  favor predicting from the previous frameAVCODEC: 
AVCODEC:   -pred              AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  prediction methodAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: leftAVCODEC: )AVCODEC: 
AVCODEC:      left            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      plane           AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      median          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:   -aspect            AVCODEC: <rational>   AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sample aspect ratioAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 10AVCODEC: )AVCODEC:  (default AVCODEC: 0/1AVCODEC: )AVCODEC: 
AVCODEC:   -sar               AVCODEC: <rational>   AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sample aspect ratioAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 10AVCODEC: )AVCODEC:  (default AVCODEC: 0/1AVCODEC: )AVCODEC: 
AVCODEC:   -debug             AVCODEC: <flags>      AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: SAVCODEC: .AVCODEC: .AVCODEC:  print specific debug infoAVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:      pict            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  picture infoAVCODEC: 
AVCODEC:      rc              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  rate controlAVCODEC: 
AVCODEC:      bitstream       AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      mb_type         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  macroblock (MB) typeAVCODEC: 
AVCODEC:      qp              AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  per-block quantization parameter (QP)AVCODEC: 
AVCODEC:      mv              AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  motion vectorAVCODEC: 
AVCODEC:      dct_coeff       AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      green_metadata  AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      skip            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      startcode       AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      pts             AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      er              AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  error recognitionAVCODEC: 
AVCODEC:      mmco            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  memory management control operations (H.264)AVCODEC: 
AVCODEC:      bugs            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      vis_qp          AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  visualize quantization parameter (QP), lower QP are tinted greenerAVCODEC: 
AVCODEC:      vis_mb_type     AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  visualize block typesAVCODEC: 
AVCODEC:      buffers         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  picture buffer allocationsAVCODEC: 
AVCODEC:      thread_ops      AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  threading operationsAVCODEC: 
AVCODEC:      nomc            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  skip motion compensationAVCODEC: 
AVCODEC:   -vismv             AVCODEC: <flags>      AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  visualize motion vectors (MVs) (deprecated)AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:      pf              AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  forward predicted MVs of P-framesAVCODEC: 
AVCODEC:      bf              AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  forward predicted MVs of B-framesAVCODEC: 
AVCODEC:      bb              AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  backward predicted MVs of B-framesAVCODEC: 
AVCODEC:   -cmp               AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  full-pel ME compare functionAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: sadAVCODEC: )AVCODEC: 
AVCODEC:      sad             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, fastAVCODEC: 
AVCODEC:      sse             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared errorsAVCODEC: 
AVCODEC:      satd            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute Hadamard transformed differencesAVCODEC: 
AVCODEC:      dct             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute DCT transformed differencesAVCODEC: 
AVCODEC:      psnr            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared quantization errors (avoid, low quality)AVCODEC: 
AVCODEC:      bit             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  number of bits needed for the blockAVCODEC: 
AVCODEC:      rd              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  rate distortion optimal, slowAVCODEC: 
AVCODEC:      zero            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  0AVCODEC: 
AVCODEC:      vsad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute vertical differencesAVCODEC: 
AVCODEC:      vsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared vertical differencesAVCODEC: 
AVCODEC:      nsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  noise preserving sum of squared differencesAVCODEC: 
AVCODEC:      w53             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  5/3 wavelet, only used in snowAVCODEC: 
AVCODEC:      w97             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  9/7 wavelet, only used in snowAVCODEC: 
AVCODEC:      dctmax          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      chroma          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      msad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, median predictedAVCODEC: 
AVCODEC:   -subcmp            AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sub-pel ME compare functionAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: sadAVCODEC: )AVCODEC: 
AVCODEC:      sad             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, fastAVCODEC: 
AVCODEC:      sse             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared errorsAVCODEC: 
AVCODEC:      satd            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute Hadamard transformed differencesAVCODEC: 
AVCODEC:      dct             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute DCT transformed differencesAVCODEC: 
AVCODEC:      psnr            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared quantization errors (avoid, low quality)AVCODEC: 
AVCODEC:      bit             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  number of bits needed for the blockAVCODEC: 
AVCODEC:      rd              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  rate distortion optimal, slowAVCODEC: 
AVCODEC:      zero            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  0AVCODEC: 
AVCODEC:      vsad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute vertical differencesAVCODEC: 
AVCODEC:      vsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared vertical differencesAVCODEC: 
AVCODEC:      nsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  noise preserving sum of squared differencesAVCODEC: 
AVCODEC:      w53             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  5/3 wavelet, only used in snowAVCODEC: 
AVCODEC:      w97             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  9/7 wavelet, only used in snowAVCODEC: 
AVCODEC:      dctmax          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      chroma          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      msad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, median predictedAVCODEC: 
AVCODEC:   -mbcmp             AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  macroblock compare functionAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: sadAVCODEC: )AVCODEC: 
AVCODEC:      sad             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, fastAVCODEC: 
AVCODEC:      sse             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared errorsAVCODEC: 
AVCODEC:      satd            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute Hadamard transformed differencesAVCODEC: 
AVCODEC:      dct             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute DCT transformed differencesAVCODEC: 
AVCODEC:      psnr            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared quantization errors (avoid, low quality)AVCODEC: 
AVCODEC:      bit             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  number of bits needed for the blockAVCODEC: 
AVCODEC:      rd              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  rate distortion optimal, slowAVCODEC: 
AVCODEC:      zero            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  0AVCODEC: 
AVCODEC:      vsad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute vertical differencesAVCODEC: 
AVCODEC:      vsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared vertical differencesAVCODEC: 
AVCODEC:      nsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  noise preserving sum of squared differencesAVCODEC: 
AVCODEC:      w53             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  5/3 wavelet, only used in snowAVCODEC: 
AVCODEC:      w97             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  9/7 wavelet, only used in snowAVCODEC: 
AVCODEC:      dctmax          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      chroma          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      msad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, median predictedAVCODEC: 
AVCODEC:   -ildctcmp          AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  interlaced DCT compare functionAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: vsadAVCODEC: )AVCODEC: 
AVCODEC:      sad             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, fastAVCODEC: 
AVCODEC:      sse             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared errorsAVCODEC: 
AVCODEC:      satd            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute Hadamard transformed differencesAVCODEC: 
AVCODEC:      dct             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute DCT transformed differencesAVCODEC: 
AVCODEC:      psnr            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared quantization errors (avoid, low quality)AVCODEC: 
AVCODEC:      bit             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  number of bits needed for the blockAVCODEC: 
AVCODEC:      rd              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  rate distortion optimal, slowAVCODEC: 
AVCODEC:      zero            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  0AVCODEC: 
AVCODEC:      vsad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute vertical differencesAVCODEC: 
AVCODEC:      vsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared vertical differencesAVCODEC: 
AVCODEC:      nsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  noise preserving sum of squared differencesAVCODEC: 
AVCODEC:      w53             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  5/3 wavelet, only used in snowAVCODEC: 
AVCODEC:      w97             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  9/7 wavelet, only used in snowAVCODEC: 
AVCODEC:      dctmax          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      chroma          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      msad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, median predictedAVCODEC: 
AVCODEC:   -dia_size          AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  diamond type & size for motion estimationAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -last_pred         AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  amount of motion predictors from the previous frameAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -preme             AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  pre motion estimationAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -precmp            AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  pre motion estimation compare functionAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: sadAVCODEC: )AVCODEC: 
AVCODEC:      sad             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, fastAVCODEC: 
AVCODEC:      sse             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared errorsAVCODEC: 
AVCODEC:      satd            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute Hadamard transformed differencesAVCODEC: 
AVCODEC:      dct             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute DCT transformed differencesAVCODEC: 
AVCODEC:      psnr            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared quantization errors (avoid, low quality)AVCODEC: 
AVCODEC:      bit             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  number of bits needed for the blockAVCODEC: 
AVCODEC:      rd              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  rate distortion optimal, slowAVCODEC: 
AVCODEC:      zero            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  0AVCODEC: 
AVCODEC:      vsad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute vertical differencesAVCODEC: 
AVCODEC:      vsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared vertical differencesAVCODEC: 
AVCODEC:      nsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  noise preserving sum of squared differencesAVCODEC: 
AVCODEC:      w53             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  5/3 wavelet, only used in snowAVCODEC: 
AVCODEC:      w97             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  9/7 wavelet, only used in snowAVCODEC: 
AVCODEC:      dctmax          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      chroma          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      msad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, median predictedAVCODEC: 
AVCODEC:   -pre_dia_size      AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  diamond type & size for motion estimation pre-passAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -subq              AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sub-pel motion estimation qualityAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 8AVCODEC: )AVCODEC: 
AVCODEC:   -me_range          AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  limit motion vectors range (1023 for DivX player)AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -ibias             AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  intra quant biasAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 999999AVCODEC: )AVCODEC: 
AVCODEC:   -pbias             AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  inter quant biasAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 999999AVCODEC: )AVCODEC: 
AVCODEC:   -global_quality    AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -coder             AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: vlcAVCODEC: )AVCODEC: 
AVCODEC:      vlc             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  variable length coder / Huffman coderAVCODEC: 
AVCODEC:      ac              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  arithmetic coderAVCODEC: 
AVCODEC:      raw             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  raw (no encoding)AVCODEC: 
AVCODEC:      rle             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  run-length coderAVCODEC: 
AVCODEC:      deflate         AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deflate-based coderAVCODEC: 
AVCODEC:   -context           AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  context modelAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -mbd               AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  macroblock decision algorithm (high quality mode)AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 2AVCODEC: )AVCODEC:  (default AVCODEC: simpleAVCODEC: )AVCODEC: 
AVCODEC:      simple          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use mbcmpAVCODEC: 
AVCODEC:      bits            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use fewest bitsAVCODEC: 
AVCODEC:      rd              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  use best rate distortionAVCODEC: 
AVCODEC:   -sc_threshold      AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  scene change thresholdAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -lmin              AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, use encoder private options insteadAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -lmax              AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, use encoder private options insteadAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -nr                AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  noise reductionAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -rc_init_occupancy AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  number of bits which should be loaded into the rc buffer before decoding startsAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -flags2            AVCODEC: <flags>      AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:      fast            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  allow non-spec-compliant speedup tricksAVCODEC: 
AVCODEC:      noout           AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  skip bitstream encodingAVCODEC: 
AVCODEC:      ignorecrop      AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  ignore cropping information from spsAVCODEC: 
AVCODEC:      local_header    AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  place global headers at every keyframe instead of in extradataAVCODEC: 
AVCODEC:      chunks          AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Frame data might be split into multiple chunksAVCODEC: 
AVCODEC:      showall         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Show all frames before the first keyframeAVCODEC: 
AVCODEC:      export_mvs      AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  export motion vectors through frame side dataAVCODEC: 
AVCODEC:      skip_manual     AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  do not skip samples and export skip information as frame side dataAVCODEC: 
AVCODEC:      ass_ro_flush_noop AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: SAVCODEC: .AVCODEC: .AVCODEC:  do not reset ASS ReadOrder field on flushAVCODEC: 
AVCODEC:   -error             AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -threads           AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set the number of threadsAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 1AVCODEC: )AVCODEC: 
AVCODEC:      auto            AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  autodetect a suitable number of threads to useAVCODEC: 
AVCODEC:   -me_threshold      AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  motion estimation thresholdAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -mb_threshold      AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  macroblock thresholdAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -dc                AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  intra_dc_precisionAVCODEC:  (from AVCODEC: -8AVCODEC:  to AVCODEC: 16AVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -nssew             AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  nsse weightAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 8AVCODEC: )AVCODEC: 
AVCODEC:   -skip_top          AVCODEC: <int>        AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  number of macroblock rows at the top which are skippedAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -skip_bottom       AVCODEC: <int>        AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  number of macroblock rows at the bottom which are skippedAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -profile           AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: unknownAVCODEC: )AVCODEC: 
AVCODEC:      unknown         AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      aac_main        AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      aac_low         AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      aac_ssr         AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      aac_ltp         AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      aac_he          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      aac_he_v2       AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      aac_ld          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      aac_eld         AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      mpeg2_aac_low   AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      mpeg2_aac_he    AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      dts             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      dts_es          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      dts_96_24       AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      dts_hd_hra      AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      dts_hd_ma       AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      mpeg4_sp        AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      mpeg4_core      AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      mpeg4_main      AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      mpeg4_asp       AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      main10          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:   -level             AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: unknownAVCODEC: )AVCODEC: 
AVCODEC:      unknown         AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:   -lowres            AVCODEC: <int>        AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  decode at 1= 1/2, 2=1/4, 3=1/8 resolutionsAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -skip_threshold    AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  frame skip thresholdAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -skip_factor       AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  frame skip factorAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -skip_exp          AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  frame skip exponentAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -skipcmp           AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  frame skip compare functionAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: dctmaxAVCODEC: )AVCODEC: 
AVCODEC:      sad             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, fastAVCODEC: 
AVCODEC:      sse             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared errorsAVCODEC: 
AVCODEC:      satd            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute Hadamard transformed differencesAVCODEC: 
AVCODEC:      dct             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute DCT transformed differencesAVCODEC: 
AVCODEC:      psnr            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared quantization errors (avoid, low quality)AVCODEC: 
AVCODEC:      bit             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  number of bits needed for the blockAVCODEC: 
AVCODEC:      rd              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  rate distortion optimal, slowAVCODEC: 
AVCODEC:      zero            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  0AVCODEC: 
AVCODEC:      vsad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute vertical differencesAVCODEC: 
AVCODEC:      vsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of squared vertical differencesAVCODEC: 
AVCODEC:      nsse            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  noise preserving sum of squared differencesAVCODEC: 
AVCODEC:      w53             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  5/3 wavelet, only used in snowAVCODEC: 
AVCODEC:      w97             AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  9/7 wavelet, only used in snowAVCODEC: 
AVCODEC:      dctmax          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      chroma          AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      msad            AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sum of absolute differences, median predictedAVCODEC: 
AVCODEC:   -border_mask       AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  deprecated, use encoder private options insteadAVCODEC:  (from AVCODEC: -FLT_MAXAVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -mblmin            AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  minimum macroblock Lagrange factor (VBR)AVCODEC:  (from AVCODEC: 1AVCODEC:  to AVCODEC: 32767AVCODEC: )AVCODEC:  (default AVCODEC: 236AVCODEC: )AVCODEC: 
AVCODEC:   -mblmax            AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  maximum macroblock Lagrange factor (VBR)AVCODEC:  (from AVCODEC: 1AVCODEC:  to AVCODEC: 32767AVCODEC: )AVCODEC:  (default AVCODEC: 3658AVCODEC: )AVCODEC: 
AVCODEC:   -mepc              AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  motion estimation bitrate penalty compensation (1.0 = 256)AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 256AVCODEC: )AVCODEC: 
AVCODEC:   -skip_loop_filter  AVCODEC: <int>        AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  skip loop filtering process for the selected framesAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: defaultAVCODEC: )AVCODEC: 
AVCODEC:      none            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard no frameAVCODEC: 
AVCODEC:      default         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard useless framesAVCODEC: 
AVCODEC:      noref           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all non-reference framesAVCODEC: 
AVCODEC:      bidir           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all bidirectional framesAVCODEC: 
AVCODEC:      nokey           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all frames except keyframesAVCODEC: 
AVCODEC:      nointra         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all frames except I framesAVCODEC: 
AVCODEC:      all             AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all framesAVCODEC: 
AVCODEC:   -skip_idct         AVCODEC: <int>        AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  skip IDCT/dequantization for the selected framesAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: defaultAVCODEC: )AVCODEC: 
AVCODEC:      none            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard no frameAVCODEC: 
AVCODEC:      default         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard useless framesAVCODEC: 
AVCODEC:      noref           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all non-reference framesAVCODEC: 
AVCODEC:      bidir           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all bidirectional framesAVCODEC: 
AVCODEC:      nokey           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all frames except keyframesAVCODEC: 
AVCODEC:      nointra         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all frames except I framesAVCODEC: 
AVCODEC:      all             AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all framesAVCODEC: 
AVCODEC:   -skip_frame        AVCODEC: <int>        AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  skip decoding for the selected framesAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: defaultAVCODEC: )AVCODEC: 
AVCODEC:      none            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard no frameAVCODEC: 
AVCODEC:      default         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard useless framesAVCODEC: 
AVCODEC:      noref           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all non-reference framesAVCODEC: 
AVCODEC:      bidir           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all bidirectional framesAVCODEC: 
AVCODEC:      nokey           AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all frames except keyframesAVCODEC: 
AVCODEC:      nointra         AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all frames except I framesAVCODEC: 
AVCODEC:      all             AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  discard all framesAVCODEC: 
AVCODEC:   -bidir_refine      AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  refine the two motion vectors used in bidirectional macroblocksAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 4AVCODEC: )AVCODEC:  (default AVCODEC: 1AVCODEC: )AVCODEC: 
AVCODEC:   -brd_scale         AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  downscale frames for dynamic B-frame decisionAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 10AVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -keyint_min        AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  minimum interval between IDR-framesAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 25AVCODEC: )AVCODEC: 
AVCODEC:   -refs              AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  reference frames to consider for motion compensationAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 1AVCODEC: )AVCODEC: 
AVCODEC:   -chromaoffset      AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  chroma QP offset from lumaAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -trellis           AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  rate-distortion optimal quantizationAVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -sc_factor         AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  multiplied by qscale for each frame and added to scene_change_scoreAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 6AVCODEC: )AVCODEC: 
AVCODEC:   -mv0_threshold     AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 256AVCODEC: )AVCODEC: 
AVCODEC:   -b_sensitivity     AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  adjust sensitivity of b_frame_strategy 1AVCODEC:  (from AVCODEC: 1AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 40AVCODEC: )AVCODEC: 
AVCODEC:   -compression_level AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: -1AVCODEC: )AVCODEC: 
AVCODEC:   -min_prediction_order AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: -1AVCODEC: )AVCODEC: 
AVCODEC:   -max_prediction_order AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: INT_MINAVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: -1AVCODEC: )AVCODEC: 
AVCODEC:   -timecode_frame_start AVCODEC: <int64>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  GOP timecode frame start number, in non-drop-frame formatAVCODEC:  (from AVCODEC: -1AVCODEC:  to AVCODEC: I64_MAXAVCODEC: )AVCODEC:  (default AVCODEC: -1AVCODEC: )AVCODEC: 
AVCODEC:   -channel_layout    AVCODEC: <int64>      AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: I64_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -request_channel_layout AVCODEC: <int64>      AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: I64_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -rc_max_vbv_use    AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -rc_min_vbv_use    AVCODEC: <float>      AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: FLT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 3AVCODEC: )AVCODEC: 
AVCODEC:   -ticks_per_frame   AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (from AVCODEC: 1AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 1AVCODEC: )AVCODEC: 
AVCODEC:   -color_primaries   AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  color primariesAVCODEC:  (from AVCODEC: 1AVCODEC:  to AVCODEC: 12AVCODEC: )AVCODEC:  (default AVCODEC: unspecifiedAVCODEC: )AVCODEC: 
AVCODEC:      bt709           AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.709AVCODEC: 
AVCODEC:      unspecified     AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  UnspecifiedAVCODEC: 
AVCODEC:      bt470m          AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.470 MAVCODEC: 
AVCODEC:      bt470bg         AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.470 BGAVCODEC: 
AVCODEC:      smpte170m       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE 170 MAVCODEC: 
AVCODEC:      smpte240m       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE 240 MAVCODEC: 
AVCODEC:      film            AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  FilmAVCODEC: 
AVCODEC:      bt2020          AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.2020AVCODEC: 
AVCODEC:      smpte428_1      AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE ST 428-1AVCODEC: 
AVCODEC:      smpte431        AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE 431-2AVCODEC: 
AVCODEC:      smpte432        AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE 422-1AVCODEC: 
AVCODEC:   -color_trc         AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  color transfer characteristicsAVCODEC:  (from AVCODEC: 1AVCODEC:  to AVCODEC: 18AVCODEC: )AVCODEC:  (default AVCODEC: unspecifiedAVCODEC: )AVCODEC: 
AVCODEC:      bt709           AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.709AVCODEC: 
AVCODEC:      unspecified     AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  UnspecifiedAVCODEC: 
AVCODEC:      gamma22         AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.470 MAVCODEC: 
AVCODEC:      gamma28         AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.470 BGAVCODEC: 
AVCODEC:      smpte170m       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE 170 MAVCODEC: 
AVCODEC:      smpte240m       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE 240 MAVCODEC: 
AVCODEC:      linear          AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  LinearAVCODEC: 
AVCODEC:      log             AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  LogAVCODEC: 
AVCODEC:      log_sqrt        AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Log square rootAVCODEC: 
AVCODEC:      iec61966_2_4    AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  IEC 61966-2-4AVCODEC: 
AVCODEC:      bt1361          AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.1361AVCODEC: 
AVCODEC:      iec61966_2_1    AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  IEC 61966-2-1AVCODEC: 
AVCODEC:      bt2020_10bit    AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.2020 - 10 bitAVCODEC: 
AVCODEC:      bt2020_12bit    AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.2020 - 12 bitAVCODEC: 
AVCODEC:      smpte2084       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE ST 2084AVCODEC: 
AVCODEC:      smpte428_1      AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE ST 428-1AVCODEC: 
AVCODEC:      arib-std-b67    AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  ARIB STD-B67AVCODEC: 
AVCODEC:   -colorspace        AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  color spaceAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 11AVCODEC: )AVCODEC:  (default AVCODEC: unspecifiedAVCODEC: )AVCODEC: 
AVCODEC:      rgb             AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  RGBAVCODEC: 
AVCODEC:      bt709           AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.709AVCODEC: 
AVCODEC:      unspecified     AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  UnspecifiedAVCODEC: 
AVCODEC:      fcc             AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  FCCAVCODEC: 
AVCODEC:      bt470bg         AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.470 BGAVCODEC: 
AVCODEC:      smpte170m       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE 170 MAVCODEC: 
AVCODEC:      smpte240m       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE 240 MAVCODEC: 
AVCODEC:      ycocg           AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  YCOCGAVCODEC: 
AVCODEC:      bt2020_ncl      AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.2020 NCLAVCODEC: 
AVCODEC:      bt2020_cl       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BT.2020 CLAVCODEC: 
AVCODEC:      smpte2085       AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  SMPTE 2085AVCODEC: 
AVCODEC:   -color_range       AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  color rangeAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 2AVCODEC: )AVCODEC:  (default AVCODEC: unspecifiedAVCODEC: )AVCODEC: 
AVCODEC:      unspecified     AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  UnspecifiedAVCODEC: 
AVCODEC:      mpeg            AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  MPEG (219*2^(n-8))AVCODEC: 
AVCODEC:      jpeg            AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  JPEG (2^n-1)AVCODEC: 
AVCODEC:   -chroma_sample_location AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  chroma sample locationAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 6AVCODEC: )AVCODEC:  (default AVCODEC: unspecifiedAVCODEC: )AVCODEC: 
AVCODEC:      unspecified     AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  UnspecifiedAVCODEC: 
AVCODEC:      left            AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  LeftAVCODEC: 
AVCODEC:      center          AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  CenterAVCODEC: 
AVCODEC:      topleft         AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Top-leftAVCODEC: 
AVCODEC:      top             AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  TopAVCODEC: 
AVCODEC:      bottomleft      AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Bottom-leftAVCODEC: 
AVCODEC:      bottom          AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  BottomAVCODEC: 
AVCODEC:   -slices            AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  set the number of slices, used in parallelized encodingAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: INT_MAXAVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:   -thread_type       AVCODEC: <flags>      AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  select multithreading typeAVCODEC:  (default AVCODEC: slice+frameAVCODEC: )AVCODEC: 
AVCODEC:      slice           AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      frame           AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:   -audio_service_type AVCODEC: <int>        AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  audio service typeAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 8AVCODEC: )AVCODEC:  (default AVCODEC: maAVCODEC: )AVCODEC: 
AVCODEC:      ma              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Main Audio ServiceAVCODEC: 
AVCODEC:      ef              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  EffectsAVCODEC: 
AVCODEC:      vi              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Visually ImpairedAVCODEC: 
AVCODEC:      hi              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Hearing ImpairedAVCODEC: 
AVCODEC:      di              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  DialogueAVCODEC: 
AVCODEC:      co              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  CommentaryAVCODEC: 
AVCODEC:      em              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  EmergencyAVCODEC: 
AVCODEC:      vo              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Voice OverAVCODEC: 
AVCODEC:      ka              AVCODEC:              AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  KaraokeAVCODEC: 
AVCODEC:   -request_sample_fmt AVCODEC: <sample_fmt> AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  sample format audio decoders should preferAVCODEC:  (default AVCODEC: noneAVCODEC: )AVCODEC: 
AVCODEC:   -sub_charenc       AVCODEC: <string>     AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: SAVCODEC: .AVCODEC: .AVCODEC:  set input text subtitles character encodingAVCODEC: 
AVCODEC:   -sub_charenc_mode  AVCODEC: <flags>      AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: SAVCODEC: .AVCODEC: .AVCODEC:  set input text subtitles character encoding modeAVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:      do_nothing      AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: SAVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      auto            AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: SAVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      pre_decoder     AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: SAVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:   -sub_text_format   AVCODEC: <int>        AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: SAVCODEC: .AVCODEC: .AVCODEC:  set decoded text subtitle formatAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 1AVCODEC: )AVCODEC:  (default AVCODEC: ass_with_timingsAVCODEC: )AVCODEC: 
AVCODEC:      ass             AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: SAVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      ass_with_timings AVCODEC:              AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: SAVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:   -refcounted_frames AVCODEC: <boolean>    AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (default AVCODEC: falseAVCODEC: )AVCODEC: 
AVCODEC:   -side_data_only_packets AVCODEC: <boolean>    AVCODEC: EAVCODEC: .AVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  (default AVCODEC: trueAVCODEC: )AVCODEC: 
AVCODEC:   -skip_alpha        AVCODEC: <boolean>    AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Skip processing alphaAVCODEC:  (default AVCODEC: falseAVCODEC: )AVCODEC: 
AVCODEC:   -field_order       AVCODEC: <int>        AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC:  Field orderAVCODEC:  (from AVCODEC: 0AVCODEC:  to AVCODEC: 5AVCODEC: )AVCODEC:  (default AVCODEC: 0AVCODEC: )AVCODEC: 
AVCODEC:      progressive     AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      tt              AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      bb              AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      tb              AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:      bt              AVCODEC:              AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: .AVCODEC: 
AVCODEC:   -dump_separator    AVCODEC: <string>     AVCODEC: EAVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: SAVCODEC: .AVCODEC: .AVCODEC:  set information dump field separatorAVCODEC: 
AVCODEC:   -codec_whitelist   AVCODEC: <string>     AVCODEC: .AVCODEC: DAVCODEC: .AVCODEC: VAVCODEC: AAVCODEC: SAVCODEC: .AVCODEC: .AVCODEC:  List of decoders that are allowed to be usedAVCODEC: 
